version: '3.5'

networks:
  backend:
    driver: ${NETWORKS_DRIVER}
# golang 静态编译
# CGO_ENABLED=0 go build -a -ldflags '-extldflags "-static"'
services:
  ## 使用makefile构建编译环境，此处不需要了,可以根据调试需要放开
  golang:                                # 自定义容器名称
    build:
      context: ./golang                  # 指定构建使用的 Dockerfile 文件
    image: go1.18
    container_name: go1.18
    environment:
      - TZ=${TZ}
      - LANG=C.UTF-8
    volumes:
      - /home/uos/dde-go/src:/usr/src
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    working_dir: /usr/src/mall
    networks:
      - backend
    restart: always

  etcd1:
    image: bitnami/etcd
    container_name: etcd1
    hostname: etcd1
    networks:
      - backend
    ports:
      - "23791:2379"
      - "23801:2380"
    environment:
      - TZ=${TZ}
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_NAME=etcd1
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd1:2380
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd1:2380
      - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster             # 在启动期间用于 etcd 集群的初始化集群记号
      - ETCD_INITIAL_CLUSTER=etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380 # 为启动初始化集群配置
      - ETCD_INITIAL_CLUSTER_STATE=new                      # 初始化集群状态
    restart: always

  etcd2:
    image: bitnami/etcd
    container_name: etcd2
    hostname: etcd2
    networks:
      - backend
    ports:
      - "23792:2379"
      - "23802:2380"
    environment:
      - TZ=${TZ}
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_NAME=etcd2
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd2:2380
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd2:2380
      - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster             # 在启动期间用于 etcd 集群的初始化集群记号
      - ETCD_INITIAL_CLUSTER=etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380 # 为启动初始化集群配置
      - ETCD_INITIAL_CLUSTER_STATE=new                      # 初始化集群状态
    restart: always

  etcd3:
    image: bitnami/etcd
    container_name: etcd3
    hostname: etcd3
    networks:
      - backend
    ports:
      - "23793:2379"
      - "23803:2380"
    environment:
      - TZ=${TZ}
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_NAME=etcd3
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd3:2380
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd3:2380
      - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster             # 在启动期间用于 etcd 集群的初始化集群记号
      - ETCD_INITIAL_CLUSTER=etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380 # 为启动初始化集群配置
      - ETCD_INITIAL_CLUSTER_STATE=new                      # 初始化集群状态
    restart: always

  etcd_web:
    image: evildecay/etcdkeeper
    container_name: etcd_web
    hostname: "etcd_web"
    volumes:
      - /home/uos/dde-go/src:/usr/src
    networks:
      - backend
    depends_on:
      - etcd1
      - etcd2
      - etcd3
    environment:
      - TZ=${TZ}
      - HOST=etcd_web
    ports:
      - "8091:8080"
    restart: always

  db:
    build: ./mysql
    hostname: "mysql"
    container_name: "mysql"
    ports:
      - "53306:3306"
    environment:
      - TZ=${TZ}
      - MYSQL_ROOT_PASSWORD=123456
    volumes:
      - ./mysql/conf:/etc/mysql/conf.d
      - ./mysql/data:/var/lib/mysql
      - ./user/model/user.sql:/docker-entrypoint-initdb.d/user.sql
      - ./product/model/product.sql:/docker-entrypoint-initdb.d/product.sql
      - ./order/model/order.sql:/docker-entrypoint-initdb.d/order.sql
      - ./pay/model/pay.sql:/docker-entrypoint-initdb.d/pay.sql
    networks:
      - backend
    restart: always
    
  cache:
    build: ./redis
    hostname: "redis"
    container_name: "redis"
    environment:
      - TZ=${TZ}   
    ports:
      - "56379:6379"
    volumes:
      - ./redis/data:/data
      - ./redis:/etc/redis
    command: /bin/bash -c "redis-server /etc/redis/redis.conf"
    networks:
      - backend
    restart: always

  userrpc:
    build: ./user/rpc
    container_name: "userrpc"
    hostname: "userrpc"
    volumes:
      - /home/uos/dde-go/src:/usr/src
    environment:
      - TZ=${TZ}
    ports:
      - "9000:9000"
    networks:
      - backend
    restart: always

  userapi:
    build: ./user/api
    container_name: "userapi"
    hostname: "userapi"
    volumes:
      - /home/uos/dde-go/src:/usr/src
    environment:
      - TZ=${TZ}    
    depends_on:
      - "userrpc"
    ports:
      - "8000:8000"
    networks:
      - backend
    restart: always

  productrpc:
    build: ./product/rpc
    container_name: "productrpc"
    hostname: "productrpc"
    volumes:
      - /home/uos/dde-go/src:/usr/src
    environment:
      - TZ=${TZ}    
    ports:
      - "9001:9001"
    networks:
      - backend
    restart: always

  productapi:
    build: ./product/api
    container_name: "productapi"
    hostname: "productapi"
    volumes:
      - /home/uos/dde-go/src:/usr/src
    environment:
      - TZ=${TZ}    
    depends_on:
      - "productrpc"
    ports:
      - "8001:8001"
    networks:
      - backend
    restart: always
    
  orderrpc:
    build: ./order/rpc
    container_name: "orderrpc"
    hostname: "orderrpc"
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    environment:
      - TZ=${TZ}    
    volumes:
      - /home/uos/dde-go/src:/usr/src
    ports:
      - "9002:9002"
    networks:
      - backend
    restart: always

  orderapi:
    build: ./order/api
    container_name: "orderapi"
    hostname: "orderapi"
    environment:
      - TZ=${TZ}    
    depends_on:
      - "orderrpc"
    volumes:
      - /home/uos/dde-go/src:/usr/src
    ports:
      - "8002:8002"
    networks:
      - backend
    restart: always

  payrpc:
    build: ./pay/rpc
    container_name: "payrpc"
    hostname: "payrpc"
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    volumes:
      - /home/uos/dde-go/src:/usr/src
    environment:
      - TZ=${TZ}    
    ports:
      - "9003:9003"
    networks:
      - backend
    restart: always

  payapi:
    build: ./pay/api
    container_name: "payapi"
    hostname: "payapi"
    volumes:
      - /home/uos/dde-go/src:/usr/src
    environment:
      - TZ=${TZ}    
    depends_on:
      - "payrpc"
    ports:
      - "8003:8003"
    networks:
      - backend
    restart: always
 
  prometheus:
    build: ./prometheus
    container_name: "prometheus"
    hostname: prometheus
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ./prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml  # 将 prometheus 配置文件挂载到容器里
    ports:
      - "${PROMETHEUS_PORT}:9090"                     # 设置容器9090端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always
  
  grafana:
    build:
      context: ./grafana
    environment:
      - TZ=${TZ}
    ports:
      - "${GRAFANA_PORT}:3000"                        # 设置容器3000端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always

  jaeger:
    build:
      context: ./jaeger
    environment:
      - TZ=${TZ}
    ports:
      - "${JAEGER_PORT}:16686"                        # 设置容器16686端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always
    
  dtm:
    build:
      context: ./dtm
    environment:
      - TZ=${TZ}
    entrypoint:
      - "/app/dtm/dtm"
      - "-c=/app/dtm/configs/config.yaml"
    privileged: true
    volumes:
      - ./dtm/config.yml:/app/dtm/configs/config.yaml # 将 dtm 配置文件挂载到容器里
    ports:
      - "${DTM_HTTP_PORT}:36789"
      - "${DTM_GRPC_PORT}:36790"
    networks:
      - backend
    restart: always

  # 配置zookeeper 集群
  zk1:
    build: ./zookeeper
    container_name: zk1
    hostname: zk1
    ports:
      - "21821:2182"
      - "21811:2181"
    networks:
      - backend
    volumes:
      - ./zookeeper/zk1/data:/data
      - ./zookeeper/zk1/datalog:/datalog
    environment:
      - TZ=${TZ}
      - ZOO_MY_ID=1
      - ZOO_SERVERS=server.1=zk1:2888:3888;2181 server.2=zk2:2888:3888;2181 server.3=zk3:2888:3888;2181
    restart: always

  zk2:
    build: ./zookeeper
    hostname: zk2
    ports:
      - "21822:2182"
      - "21812:2181"
    container_name: zk2
    networks:
      - backend
    volumes:
      - ./zookeeper/zk2/data:/data
      - ./zookeeper/zk2/datalog:/datalog
    environment:
      - TZ=${TZ}
      - ZOO_MY_ID=2
      - ZOO_SERVERS=server.1=zk1:2888:3888;2181 server.2=zk2:2888:3888;2181 server.3=zk3:2888:3888;2181
    restart: always

  zk3:
    build: ./zookeeper
    hostname: zk3
    ports:
      - "21823:2182"
      - "21813:2181"
    container_name: zk3
    networks:
      - backend
    volumes:
      - ./zookeeper/zk3/data:/data
      - ./zookeeper/zk3/datalog:/datalog
    environment:
      - TZ=${TZ}
      - ZOO_MY_ID=3
      - ZOO_SERVERS=server.1=zk1:2888:3888;2181 server.2=zk2:2888:3888;2181 server.3=zk3:2888:3888;2181
    restart: always

  # 配置kafka中间件
  broker1:
    build: ./kafka
    container_name: broker1
    user: root
    ports:
      - "9192:9092"
    # 依赖zookeeper启动
    depends_on:
      - zk1
      - zk2
      - zk3
    networks:
      - backend
    environment:
      - TZ=${TZ}
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zk1:2181,zk2:2181,zk3:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${KAFKA_ADVERTISED_LISTENERS_IP}:9192
    volumes:
      - ./kafka/broker1/kafka:/bitnami/kafka
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always

  broker2:
    build: ./kafka
    container_name: broker2
    user: root
    ports:
      - "9292:9092"
    # 依赖zookeeper启动
    depends_on:
      - zk1
      - zk2
      - zk3
    networks:
      - backend
    environment:
      - KAFKA_BROKER_ID=2
      - KAFKA_ZOOKEEPER_CONNECT=zk1:2181,zk2:2181,zk3:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${KAFKA_ADVERTISED_LISTENERS_IP}:9292
      - TZ=${TZ}
    volumes:
      - ./kafka/broker2/kafka:/bitnami/kafka
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always

  broker3:
    build: ./kafka
    container_name: broker3
    user: root
    ports:
      - "9392:9092"
    # 依赖zookeeper启动
    depends_on:
      - zk1
      - zk2
      - zk3
    networks:
      - backend
    environment:
      - KAFKA_BROKER_ID=3
      - KAFKA_ZOOKEEPER_CONNECT=zk1:2181,zk2:2181,zk3:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${KAFKA_ADVERTISED_LISTENERS_IP}:9392
      - TZ=${TZ}
    volumes:
      - ./kafka/broker3/kafka:/bitnami/kafka
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always


  kafka-manager:
    image: sheepkiller/kafka-manager:latest
    container_name: kafka-manager
    hostname: kafka-manager
    ports: 
      - "9010:9000"
    links:
      - broker1
      - broker2
      - broker3
    external_links:
      - zk1
      - zk2
      - zk3
    environment:
      - ZK_HOSTS=zk1:2181,zk2:2181,zk3:2181
      - TZ=${TZ}
    networks:
      - backend
    restart: always


  filebeat:
    build: ./filebeat
    container_name: filebeat
    hostname: filebeat
    user: root
    environment:
      - TZ=${TZ}
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - /var/lib/docker/containers:/var/lib/docker/containers
    networks:
      - backend
    depends_on:
      - broker1
    restart: always

  elasticsearch:
    build: ./elasticsearch
    container_name: elasticsearch
    hostname: elasticsearch
    user: root
    environment:
      - "cluster.name=elasticsearch" #设置集群名称为elasticsearch
      - "discovery.type=single-node" #以单一节点模式启动
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m" #设置使用jvm内存大小
      - TZ=${TZ}
    volumes:
      - ./elasticsearch/plugins:/usr/share/elasticsearch/plugins #插件文件挂载
      - ./elasticsearch/data:/usr/share/elasticsearch/data #数据文件挂载
    ports:
      - 49200:9200
      - 49300:9300
    networks:
      - backend
    restart: always


  kibana:
    build: ./kibana
    hostname: kibana
    container_name: kibana
    links:
      - elasticsearch:es #可以用es这个域名访问elasticsearch服务
    depends_on:
      - elasticsearch #kibana在elasticsearch启动之后再启动
    networks:
      - backend
    environment:
      - "elasticsearch.hosts=http://es:9200" #设置访问elasticsearch的地址
      - TZ=${TZ}
    ports:
      - 45601:5601
    restart: always

  go-stash:
    build: ./go-stash
    container_name: go-stash
    hostname: go-stash
    volumes:
      - ./go-stash/config.yaml:/app/etc/config.yaml
    environment:
      - TZ=${TZ}
    networks:
      - backend
    depends_on:
      - elasticsearch
      - broker1
    restart: always
